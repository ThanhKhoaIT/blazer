- if @query.errors.any?
  .alert.alert-danger= @query.errors.full_messages.first
#app{"v-cloak" => ""}
  = form_for @query, url: (@query.persisted? ? query_path(@query, variable_params) : queries_path(variable_params)), html: {autocomplete: "off"} do |f|
    .row
      #statement-box.col-xs-8
        .form-group
          = f.hidden_field :statement
          #editor-container
            #editor{style: "{ height: editorHeight }"}= @query.statement.to_s.gsub("\n", '')
        .form-group.text-right{style: "margin-bottom: 8px;"}
          .pull-left{style: "margin-top: 8px;"}
            = link_to "Back", :back
            = link_to 'Schema', 'schemaPath', style: 'margin-left: 40px;', target: :blank
            - if Blazer.integration
              = link_to 'Integration', '#integration-session', style: 'margin-left: 40px;', data: { toggle: :collapse }
          = f.select :data_source, Blazer.data_sources.values.select { |ds| q = @query.dup; q.data_source = ds.id; q.editable?(blazer_user) }.map { |ds| [ds.name, ds.id] }, {}, class: ("hide" if Blazer.data_sources.size <= 1), style: "width: 140px;"
          #tables{style: "display: inline-block; width: 250px; margin-right: 10px;"}
            %select#table_names{placeholder: "Preview table", style: "width: 240px;"}
          %a.btn.btn-info{style: "vertical-align: top; width: 70px;", "v-if" => "!running", "v-on:click" => "run"} Run
          %a.btn.btn-danger{style: "vertical-align: top; width: 70px;", "v-if" => "running", "v-on:click" => "cancel"} Cancel
        - if Blazer.integration
          #integration-session.collapse
            %hr
            = f.hidden_field :integration
            #integration-editor{style: 'height: 200px'}
        %hr
        = render partial: "tips"
      .col-xs-4
        .form-group
          = f.label :name
          = f.text_field :name, class: "form-control"
        .form-group
          = f.label :description
          = f.text_area :description, placeholder: "Optional", style: "height: 80px;", class: "form-control"
        - if @assignees.any?
          .form-group
            = f.label :assignees
            = f.collection_select :assignee_ids, @assignees, :first, :last, {}, { placeholder: "Assignees", style: "height: 80px;", class: "form-control", multiple: true }
        - if @teams.any?
          .form-group
            = f.label :teams
            = f.collection_select :team_ids, @teams, :first, :last, {}, { placeholder: "Teams", style: "height: 80px;", class: "form-control", multiple: true }
        .form-group.text-right
          = f.submit "For Enter Press", class: "hide"
          - if @query.persisted?
            = link_to "Delete", query_path(@query), method: :delete, "data-confirm" => "Are you sure?", class: "btn btn-danger"
            = f.submit "Fork", class: "btn btn-info"
          = f.submit @query.persisted? ? "Update" : "Create", class: "btn btn-success"
        - if @query.persisted?
          - dashboards_count = @query.dashboards.count
          - checks_count = @query.checks.count
          - words = []
          - words << pluralize(dashboards_count, "dashboard") if dashboards_count > 0
          - words << pluralize(checks_count, "check") if checks_count > 0
          - if words.any?
            .alert.alert-info{:style => "margin-bottom: 0;"}
              Part of #{words.to_sentence}. Be careful when editing.
  #results
    %p.text-muted{"v-if" => "running"} Loading...
    #results-html{":class" => "{ 'query-error': error }", "v-if" => "!running"}

:javascript
  #{blazer_js_var "params", variable_params}
  #{blazer_js_var "previewStatement", Hash[Blazer.data_sources.map { |k, v| [k, (v.preview_statement rescue "")] }]}

  var app = new Vue({
    el: "#app",
    data: {
      running: false,
      results: "",
      error: false,
      dataSource: "",
      selectize: null,
      editorHeight: "180px"
    },
    computed: {
      schemaPath: function() {
        return Routes.schema_queries_path({data_source: this.dataSource})
      },
      docsPath: function() {
        return Routes.docs_queries_path({data_source: this.dataSource})
      }
    },
    methods: {
      run: function(e) {
        this.running = true
        this.results = ""
        this.error = false
        cancelAllQueries()

        var data = $.extend({}, params, {
          statement: this.getSQL(),
          integration: $('#integration').val(),
          data_source: $("#query_data_source").val()
        })

        var _this = this

        runQuery(data, function (data) {
          _this.running = false
          _this.showResults(data)

          errorLine = _this.getErrorLine()
          if (errorLine) {
            editor.getSession().addGutterDecoration(errorLine - 1, "error")
            editor.scrollToLine(errorLine, true, true, function () {})
            editor.gotoLine(errorLine, 0, true)
            editor.focus()
          }
        }, function (data) {
          _this.running = false
          _this.error = true
          _this.showResults(data)
        })
      },
      cancel: function(e) {
        this.running = false
        cancelAllQueries()
      },
      updateDataSource: function(dataSource) {
        this.dataSource = dataSource
        var selectize = this.selectize
        selectize.clearOptions()

        if (this.tablesXhr) {
          this.tablesXhr.abort()
        }

        this.tablesXhr = $.getJSON(Routes.tables_queries_path({data_source: this.dataSource}), function(data) {
          var newOptions = []
          for (var i = 0; i < data.length; i++) {
            newOptions.push({text: data[i], value: data[i]})
          }
          selectize.clearOptions()
          selectize.addOption(newOptions)
          selectize.refreshOptions(false)
        })
      },
      showIntegrationEditor: function() {
        if ($('#integration-editor').length) {
          integrationEditor = ace.edit("integration-editor")
          integrationEditor.setTheme("ace/theme/twilight")
          integrationEditor.getSession().setMode("ace/mode/ruby")
          integrationEditor.setOptions({
            fontSize: 12,
            minLines: 10,
            enableSnippets: false,
            highlightActiveLine: false,
            enableLiveAutocompletion: true,
            enableBasicAutocompletion: true
          })
          integrationEditor.renderer.setShowGutter(true)
          integrationEditor.renderer.setPrintMarginColumn(false)
          integrationEditor.renderer.setPadding(10)
          integrationEditor.getSession().setUseWrapMode(true)
        }
      },
      showEditor: function() {
        var _this = this
        editor = ace.edit("editor")
        editor.setTheme("ace/theme/twilight")
        editor.getSession().setMode("ace/mode/sql")
        editor.setOptions({
          fontSize: 12,
          minLines: 10,
          enableSnippets: false,
          highlightActiveLine: false,
          enableLiveAutocompletion: true,
          enableBasicAutocompletion: true
        })
        editor.renderer.setShowGutter(true)
        editor.renderer.setPrintMarginColumn(false)
        editor.renderer.setPadding(10)
        editor.getSession().setUseWrapMode(true)
        editor.commands.addCommand({
          name: "run",
          bindKey: {win: "Ctrl-Enter",  mac: "Command-Enter"},
          exec: function(editor) {
            _this.run()
          },
          readOnly: false // false if this command should not apply in readOnly mode
        })
        // fix command+L
        editor.commands.removeCommands(["gotoline", "find"])

        var langTools = ace.require("ace/ext/language_tools");

        var addSuggestItems = function(callback) {
          if (window.tableNames === undefined) return;
          callback(null, window.tableNames.map(function(table) {
            return { name: table, value: table, score: 100, meta: "table" };
          }));
        }

        // Load tables
        langTools.addCompleter({
          getCompletions: function(editor, session, pos, prefix, callback) {
            if (prefix.length === 0) { callback(null, []); return }
            if (window.tableNames !== undefined) {
              addSuggestItems(callback);
            } else {
              $.getJSON(
                Routes.tables_queries_path({data_source: this.dataSource})
                , function(tables) {
                  window.tableNames = tables;
                  // wordList like [{"word":"flow","freq":24,"score":300,"flags":"bc","syllables":"1"}]
                  addSuggestItems(callback);
                }
              )
            }
          }
        });

        // Load columns
        langTools.addCompleter({
          getCompletions: function(editor, session, pos, prefix, callback) {
            if (prefix.length === 0) { callback(null, []); return }
            var sql = $('#query_statement').val();
            tables = sql.toLowerCase().match(/(join|from) ([a-z_]{2,50})/g);
            if (tables === null) { callback(null, []); return }
            tables = tables.map(function(table) { return table.split(' ')[1] });
            key = tables.join('-');
            if (window[key]) {
              callback(null, window[key].map(function(col) {
                return { name: col, value: col, score: 100, meta: "column" };
              }));
            } else {
              $.getJSON(
                Routes.columns_queries_path({data_source: this.dataSource, tables: tables})
                , function(columns) {
                  window[key] = Array.from(new Set(columns));
                  // wordList like [{"word":"flow","freq":24,"score":300,"flags":"bc","syllables":"1"}]
                  callback(null, window[key].map(function(col) {
                    return { name: col, value: col, score: 100, meta: "column" };
                  }));
                }
              )
            }
          }
        });

        this.editor = editor

        editor.getSession().on("change", function () {
          $("#query_statement").val(editor.getValue())
          _this.adjustHeight()
        })
        this.adjustHeight()
        editor.focus()
      },
      adjustHeight: function() {
        // https://stackoverflow.com/questions/11584061/
        var editor = this.editor
        var lines = editor.getSession().getScreenLength()
        if (lines < 9) {
          lines = 9
        }

        this.editorHeight = ((lines + 1) * 16).toString();
        $('#editor').height(this.editorHeight);

        Vue.nextTick(function () {
          editor.resize()
        })
      },
      getSQL: function() {
        var selectedText = editor.getSelectedText()
        var text = selectedText.length < 10 ? editor.getValue() : selectedText
        return text.replace(/\n/g, "\r\n")
      },
      getErrorLine: function() {
        var editor = this.editor
        var errorLine = this.results.substring(0, 100).includes("alert-danger") && /LINE (\d+)/g.exec(this.results)

        if (errorLine) {
          errorLine = parseInt(errorLine[1], 10)
          if (editor.getSelectedText().length >= 10) {
            errorLine += editor.getSelectionRange().start.row
          }
          return errorLine
        }
      },
      showResults(data) {
        // can't do it the Vue way due to script tags in results
        // this.results = data

        Vue.nextTick(function () {
          $("#results-html").html(data)
        })
      }
    },
    mounted: function() {
      var _this = this

      var $select = $("#table_names").selectize({})
      var selectize = $select[0].selectize
      selectize.on("change", function(val) {
        editor.setValue(previewStatement[_this.dataSource].replace("{table}", val), 1)
        _this.run()
        selectize.clear(true)
        selectize.blur()
      })
      this.selectize = selectize

      this.updateDataSource($("#query_data_source").val())

      var $dsSelect = $("#query_data_source").selectize({})
      var dsSelectize = $dsSelect[0].selectize
      dsSelectize.on("change", function(val) {
        _this.updateDataSource(val)
        dsSelectize.blur()
      })

      this.showEditor();
      // this.showIntegrationEditor();
    }
  })

  function backupSQL() {
    $.ajax({
      url: "#{backup_queries_path}",
      method: 'POST',
      data: {
        sql_query: $('#query_statement').val()
      }
    })
  }

  $(document).ready(function() {
    $('#query_assignee_ids, #query_team_ids').select2();
    setInterval(function() {
      var lastVersion = $('#query_statement').val();
      if (localStorage.getItem('lastVersion') !== lastVersion) {
        localStorage.setItem('lastVersion', lastVersion);
      }
    }, 10000);
  });

  $(document).keydown(function(event) {
    if ((event.ctrlKey || event.metaKey) && event.which == 83) {
      backupSQL();
      event.preventDefault();
      return false;
    }
  });
