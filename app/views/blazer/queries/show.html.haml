- blazer_title @query.name
.topbar
  .container
    .row{:style => "padding-top: 13px;"}
      .col-sm-8
        = render partial: "blazer/nav"
        %h4{style: "line-height: 34px; display: inline; margin-left: 5px;"}
          = @query.name
      .col-sm-4.text-right
        = link_to "Edit", edit_query_path(@query, variable_params), class: "btn btn-default", disabled: !@query.editable?(blazer_user)
        = link_to "Fork", new_query_path(variable_params.merge(fork_query_id: @query.id, data_source: @query.data_source, name: @query.name)), class: "btn btn-info"
        - if !@error && @success
          = button_to "⤓ .csv", run_queries_path(query_id: @query.id, format: "csv", forecast: params[:forecast]), params: {statement: @statement}, class: "btn btn-primary"
          = button_to "⤓ .xlsx", run_queries_path(query_id: @query.id, format: "xlsx"), params: {statement: @statement}, class: "btn btn-primary"
%div{:style => "margin-bottom: 60px;"}
- if @sql_errors.any?
  .alert.alert-danger
    %ul
      - @sql_errors.each do |message|
        %li= message
- if @query.description.present?
  %p= @query.description

= render partial: "blazer/variables", locals: {action: query_path(@query)}

%ul.nav.nav-tabs
  %li#chart-tab.active= link_to 'Chart', '#chart', data: { toggle: :tab }
  %li= link_to 'Query', '#query', data: { toggle: :tab }
  %li= link_to 'Integration', '#integration', data: { toggle: :tab }
  %li= link_to 'Table', '#table', data: { toggle: :tab }, id: 'table-tab'
.tab-content
  #chart.tab-pane.fade.in.active
  #query.tab-pane.fade
    %pre#code
      %code= @statement.gsub("\r", "\n")
  #integration.tab-pane.fade
    = @query.integration
  #table.tab-pane.fade
    - if @success
      #results
        %p.text-muted Loading...
      :javascript
        function showRun(data) {
          $("#results").html(data);
          $("#results table").stupidtable().stickyTableHeaders({
            fixedOffset: 60,
          });
        }

        function showError(message) {
          $("#results").addClass("query-error").html(message);
        }

        #{blazer_js_var "data", variable_params.merge(statement: @statement, query_id: @query.id, data_source: @query.data_source)}

        runQuery(data, showRun, showError)
    - unless %w(mongodb).include?(Blazer.data_sources[@query.data_source].adapter)
      :javascript
        // do not highlight really long queries
        // this can lead to performance issues
        if ($("code").text().length < 10000) {
          hljs.highlightBlock(document.getElementById("code"));
        }
